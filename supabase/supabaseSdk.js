import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
dotenv.config();

// Returns a supabase client
export const supabaseClient = () => {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_KEY
  );
}

// Count the number of lines in the whitelisted_clusters table
export const getNumberOfDV = async (client) => {
  const { count, error } = await client
    .from("whitelisted_clusters")
    .select("*", { count: "exact", head: true });

  if (error) {
    console.error("Error fetching number of DV:", error.message);
    return null;
  }
  return count;
};

// Add a newly created cluster to the database
export const addNewClusterDB = async (client, tx_hash, config_hash, operators) => {
  try {
    const { data, error } = await client
      .from("whitelisted_clusters")
      .insert([{ tx_hash, config_hash, operators }]);

    if (error) {
      console.error("Error adding new cluster to database:", error.message);
      return null;
    }
    return data;
  } catch (error) {
    console.error("Error adding new cluster to database:", error.message);
    return null;
  }
};
// Knowing that
//  create table
//    public.whitelisted_clusters (
//      id bigint generated by default as identity not null,
//      created_at timestamp with time zone not null default now(),
//      config_hash text not null,
//      lock_hash text null,
//      tx_hash text null,
//      num_operators integer not null default 4,
//      num_validators integer not null default 1,
//      name text not null,
//      validator_addresses text[] null,
//      operators text[] null,
//      is_deposit_data_stored boolean null,
//      deposit_data_url text null,
//      is_deposit_data_used boolean null,
//      constraint whitelisted_clusters_pkey primary key (id),
//      constraint whitelisted_clusters_config_hash_key unique (config_hash)
//    ) tablespace pg_default;

// create trigger trigger_update_num_operators before insert
// or
// update on whitelisted_clusters for each row
// execute function update_num_operators ();

// Fetch the list of whitelisted clusters from database and return a list of config hashes
export const getWhitelistedDVInCreation = async (client) => {
  try {
    // Fetch config_hashes where dv_status is 1_Cluster_proposed
    const { data, error } = await client
      .from("whitelisted_clusters")
      .select("config_hash")
      .eq("dv_status", "1_Cluster_proposed");

    if (error) {
      throw error;
    }

    const configHashes = data.map((cluster) => cluster.config_hash);
    return configHashes;
  } catch (error) {
    console.error("Error fetching whitelisted clusters:", error.message);
    return null;
  }
};

export const updateDatabase = async (client, updates, configHash) => {
  try {
    const { error } = await client
      .from("whitelisted_clusters")
      .update(updates)
      .eq("config_hash", configHash);

    if (error) {
      console.error("Error updating deposit_data_url:", error.message);
    }
  } catch (error) {
    console.error(
      "Error storing the url:",
      error.response?.data || error.message
    );
    throw error;
  }
};

// Update the DB with the channel ID
export const updateDBwithChannelId = async (client, config_hash, channelId) => {
  const { data, error } = await client
    .from("whitelisted_clusters")
    .update({ channel_id: channelId })
    .eq("config_hash", config_hash);

  if (error) {
    console.error("Error updating DB with channel ID:", error.message);
    return null;
  }
  return data;
};
